#include "common.cgh"

#if LANDSCAPE_USE_INSTANCING

	VPROG_IN_BEGIN
		VPROG_IN_STREAM_VERTEX
			VPROG_IN_TEXCOORD0(4) //position + edgeShiftDirection
			VPROG_IN_TEXCOORD1(4) //edge mask
			VPROG_IN_TEXCOORD2(2) //edgeVertexIndex + edgeMaskNull
		VPROG_IN_STREAM_INSTANCE
			VPROG_IN_TEXCOORD3(3) //patch position + scale
			VPROG_IN_TEXCOORD4(4) //near patch lodOffset
		#if LANDSCAPE_LOD_MORPHING
			VPROG_IN_TEXCOORD5(4) //near patch morph
			VPROG_IN_TEXCOORD6(3) //patch lod + morph + pixelMappingOffset
		#endif
	VPROG_IN_END
	
#else
	
	VPROG_IN_BEGIN
		VPROG_IN_POSITION
		VPROG_IN_TEXCOORD
	VPROG_IN_END
	
#endif

VPROG_OUT_BEGIN
    
    VPROG_OUT_POSITION
    VPROG_OUT_TEXCOORD0(texCoord,2)
    #if TILEMASK
        VPROG_OUT_TEXCOORD1(texCoordTiled,2)
    #endif

    #if VERTEX_FOG
        VPROG_OUT_TEXCOORD5(varFog,4)
    #endif

	#if LANDSCAPE_MORPHING_COLOR
		VPROG_OUT_COLOR0(morphColor,4)
	#endif
	
VPROG_OUT_END

#if LANDSCAPE_USE_INSTANCING
	DECL_VP_SAMPLER2D(heightmap)
#endif

#if TILEMASK
    property float2 textureTiling              : static,instance : def_value=50,50;
#endif

property float4x4 worldViewProjMatrix          : dynamic,a : ;

#if LANDSCAPE_USE_INSTANCING
	property float3 boundingBoxSize 		   : dynamic,a : ;
    property float heightmapTextureSize        : dynamic,a : ;
#endif

#if VERTEX_FOG
property float4x4 worldMatrix                  : dynamic,a : ;
property float4x4 worldViewMatrix              : dynamic,a : ;
property float3   cameraPosition               : dynamic,a : ;
#endif
#if VERTEX_FOG && FOG_ATMOSPHERE
property float4   lightPosition0               : dynamic,a : ;
#endif

#include "vp-fog-props.cgh"

VPROG_BEGIN

#if LANDSCAPE_USE_INSTANCING

    float2 in_pos = VP_IN_TEXCOORD0.xy;
    float2 edgeShiftDirection = VP_IN_TEXCOORD0.zw;
    float4 edgeMask = VP_IN_TEXCOORD1;
	float edgeVertexIndex = VP_IN_TEXCOORD2.x;
	
    float3 patchOffsetScale = VP_IN_TEXCOORD3.xyz;
	float4 nearPatchLodOffset = VP_IN_TEXCOORD4;
	
	//Calculate vertecies offset for fusing neighboring patches
	float lodOffset = dot(edgeMask, nearPatchLodOffset);
    float edgeShiftAmount = pow(2.0, lodOffset);
	in_pos += edgeShiftDirection * fmod(edgeVertexIndex, edgeShiftAmount);
	
    float2 relativePosition = patchOffsetScale.xy + in_pos.xy * patchOffsetScale.z; //[0.0, 1.0]
	
#if LANDSCAPE_LOD_MORPHING
	
	float edgeMaskNull = VP_IN_TEXCOORD2.y; //if all components of edgeMask is zero - this value is 0.0, othewise - 1.0. Used for a little optimization.
	float4 nearPatchMorph = VP_IN_TEXCOORD5;
	
	float baseLod = VP_IN_TEXCOORD6.x;
	float patchMorph = VP_IN_TEXCOORD6.y;
	float basePixelOffset = VP_IN_TEXCOORD6.z;
	
	//Calculate 'zero-multiplier' that provide fetch zero-mip for vertecies at the edges whith climbs beyound height-texture. 
	float2 zeroLod = STEP(1.0, relativePosition);
	float zeroLodMul = 1.0 - min(1.0, zeroLod.x + zeroLod.y);

	//Calculate fetch parameters
	float sampleLod = (baseLod + lodOffset) * zeroLodMul;
	float samplePixelOffset = basePixelOffset * edgeShiftAmount * zeroLodMul; //mul by 'edgeShiftAmount' give 0.5 / ( 2 ^ ( baseLod + lodOffset ) )
	float4 heightmapSample = VP_TEXTURE2D(heightmap, float2(relativePosition + samplePixelOffset), sampleLod);
	
	//Calculate morphed height. 
	float morphAmount = dot(edgeMask, nearPatchMorph) + patchMorph * edgeMaskNull;
	// float h0 = dot(heightmapSample.xy, float2(0.0038910506, 0.99610895)); // 'accurate' height
	// float h1 = dot(heightmapSample.zw, float2(0.0038910506, 0.99610895)); // 'averaged' height
	// float height = lerp(h1, h0, morphAmount);
	
	// This code make the same thing as the code above, but potentially using fewer multiplications
	float2 hmSampleMorphed = lerp(heightmapSample.zw, heightmapSample.xy, morphAmount);
	float height = dot(hmSampleMorphed, float2(0.0038910506, 0.99610895));
	
	#if LANDSCAPE_MORPHING_COLOR
		VP_OUT(morphColor) = float4(1.0 - morphAmount, morphAmount, 1.0, 1.0);
	#endif

#else
	
	float4 heightmapSample = VP_TEXTURE2D(heightmap, float2(relativePosition + 0.5 / heightmapTextureSize), 0.0);
	float height = dot(heightmapSample, float4(0.00022888532845, 0.00366216525521, 0.05859464408331, 0.93751430533303));
	
#endif

    float3 vx_position = float3( relativePosition - 0.5, height ) * boundingBoxSize;
	
    VP_OUT_POSITION = mul( float4(vx_position.x, vx_position.y, vx_position.z, 1.0), worldViewProjMatrix );
    VP_OUT(texCoord) = float2(relativePosition.x, 1.0 - relativePosition.y);
	 
#else
	
	float3 vx_position = VP_IN_POSITION.xyz;
    
    VP_OUT_POSITION = mul( float4(vx_position.x, vx_position.y, vx_position.z, 1.0), worldViewProjMatrix );
	VP_OUT(texCoord) = VP_IN_TEXCOORD;
	
#endif
	
    VP_OUT(texCoordTiled) = VP_OUT(texCoord) * textureTiling.xy;
    
VPROG_END
