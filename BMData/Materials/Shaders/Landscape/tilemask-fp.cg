#include "common.cgh"

FPROG_IN_BEGIN
    
    FPROG_IN_TEXCOORD0(texCoord,2)
    #if TILEMASK
        FPROG_IN_TEXCOORD1(texCoordTiled,2)
    #endif
	
	#if LANDSCAPE_SPECULAR
        FPROG_IN_TEXCOORD2(varHalfVec,3)
        FPROG_IN_TEXCOORD3(varToLightVec,3)        
        FPROG_IN_TEXCOORD4(varToCameraVec,3) 
	#endif
	
    #if VERTEX_FOG
        FPROG_IN_TEXCOORD5(varFog,4)
    #endif

	#if LANDSCAPE_MORPHING_COLOR
		FPROG_IN_COLOR0(morphColor,4) //patch color
	#endif
	
FPROG_IN_END

FPROG_OUT_BEGIN
    FPROG_OUT_COLOR
FPROG_OUT_END

#if TILEMASK
    DECL_FP_SAMPLER2D(tileTexture0)
    DECL_FP_SAMPLER2D(tileMask)
    DECL_FP_SAMPLER2D(colorTexture)

    property float3 tileColor0 : static,instance : def_value=1,1,1;
    property float3 tileColor1 : static,instance : def_value=1,1,1;
    property float3 tileColor2 : static,instance : def_value=1,1,1;
    property float3 tileColor3 : static,instance : def_value=1,1,1;
#else
    DECL_FP_SAMPLER2D(fullTiledTexture)
#endif

#if CURSOR
DECL_FP_SAMPLER2D(cursorTexture)
property float4 cursorCoordSize : static,instance : def_value=0,0,1,1;
#endif

#if LANDSCAPE_SPECULAR
	property float inGlossiness 			: static,a : def_value=0.5;
	property float inSpecularity 			: static,a : def_value=1.0;
    property float3 metalFresnelReflectance : static,a : def_value=0.5,0.5,0.5;
	property float4 lightPosition0 			: dynamic,a : ;
	property float3 lightColor0 			: dynamic,a : ;
	
	// prototype, to shut up Metal shader-compiler
	float3 FresnelShlickVec3( float NdotL, float3 Cspec );
	float3 FresnelShlickVec3( float NdotL, float3 Cspec )
	{
		float fresnel_exponent = 5.0;
		return (1.0 - Cspec) * (pow(1.0 - NdotL, fresnel_exponent)) + Cspec;
	}
#endif

FPROG_BEGIN

#ifdef TILEMASK
    float4 tileColor = FP_TEXTURE2D( tileTexture0, FP_IN(texCoordTiled) );
    float4 mask = FP_TEXTURE2D( tileMask, FP_IN(texCoord) );
    float4 color = FP_TEXTURE2D( colorTexture, FP_IN(texCoord) );
    
    float3 color3 = (tileColor.r * mask.r * tileColor0.rgb + 
                     tileColor.g * mask.g * tileColor1.rgb + 
                     tileColor.b * mask.b * tileColor2.rgb + 
                     tileColor.a * mask.a * tileColor3.rgb ) * color.rgb * 2.0;
#else
    float3 color3 = FP_TEXTURE2D(fullTiledTexture, FP_IN(texCoord)).rgb;
#endif                     
         
    float4 outColor = float4(color3, 1.0);
    
#if LANDSCAPE_LOD_MORPHING && LANDSCAPE_MORPHING_COLOR
	outColor = outColor * 0.25 + FP_IN(morphColor) * 0.75;
#endif
	
#if CURSOR
    float2 cursorCoord = (FP_IN(texCoord) + cursorCoordSize.xy) / cursorCoordSize.zw + float2(0.5, 0.5);
    float4 cursorColor = FP_TEXTURE2D( cursorTexture, cursorCoord );
    outColor.rgb *= 1.0 - cursorColor.a;
    outColor.rgb += cursorColor.rgb * cursorColor.a;
#endif
    
#if LANDSCAPE_SPECULAR

	float3 normal = float3(0.0, 0.0, 1.0); //fetch from normalmap here

    float3 normalizedHalf = normalize(FP_IN(varHalfVec.xyz));
            
    float NdotL = max (dot (normal, FP_IN(varToLightVec).xyz), 0.0);
    float NdotH = max (dot (normal, normalizedHalf), 0.0);
    float LdotH = max (dot (FP_IN(varToLightVec).xyz, normalizedHalf), 0.0);
    float NdotV = max (dot (normal, FP_IN(varToCameraVec)), 0.0);

	float3 fresnelOut = FresnelShlickVec3( NdotV, metalFresnelReflectance );
	
	float glossiness = inGlossiness * color.a;
    float glossPower = pow(5000.0, glossiness);
    float specularNorm = (glossiness + 2.0) / 8.0;
	float specularNormalized = specularNorm * pow(NdotH, glossPower) * NdotL * inSpecularity;
	float3 specular = specularNormalized * fresnelOut;
	
    outColor.rgb += specular * lightColor0;
	
#endif

    FP_OUT_COLOR = outColor;    
    
    #if VERTEX_FOG
        
        float   varFogAmoung = FP_IN(varFog).a;
        float3  varFogColor  = FP_IN(varFog).rgb;
        
        #if !FRAMEBUFFER_FETCH
            //VI: fog equation is inside of color equation for framebuffer fetch
            FP_OUT_COLOR.rgb = lerp( FP_OUT_COLOR.rgb, varFogColor, varFogAmoung );
        #endif
    #endif
    
FPROG_END
