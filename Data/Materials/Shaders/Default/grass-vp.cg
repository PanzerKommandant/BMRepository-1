#include "common.cgh"

VPROG_IN_BEGIN
    VPROG_IN_POSITION
    VPROG_IN_TEXCOORD0(2)
    VPROG_IN_TEXCOORD1(3)
    VPROG_IN_TEXCOORD2(3)
VPROG_IN_END

VPROG_OUT_BEGIN
    VPROG_OUT_POSITION
    VPROG_OUT_TEXCOORD0(texCoord,2)
    VPROG_OUT_COLOR0_LOW(vegetationColor,3)
    #if VERTEX_FOG
        VPROG_OUT_TEXCOORD5(varFog,4)
    #endif
VPROG_OUT_END

DECL_VP_SAMPLER2D(heightmap)
DECL_VP_SAMPLER2D(vegetationmap)

#if VERTEX_FOG
property float4x4 worldViewMatrix : dynamic,a : ;
#endif
#if VERTEX_FOG && FOG_ATMOSPHERE
property float4x4 worldViewInvTransposeMatrix : dynamic,a : ;
property float4 lightPosition0 : dynamic,a : ;
#if DISTANCE_ATTENUATION
property float lightIntensity0 : static,a : ; 
#endif
#endif

#if VERTEX_FOG
property float3 cameraPosition : dynamic,a : ;
property float4x4 worldMatrix : dynamic,instance : ;
#endif

#include "vp-fog-props.cgh"

property float4x4 worldViewProjMatrix : dynamic,instance : ;
property float heightmapTextureSize        : dynamic,a : ;
	
property float3 tilePos : static,instance : ;
property float3 worldSize : static,instance : ;
property float2 lodSwitchScale : static,instance : ;
property float4 vegWaveOffsetx : static,instance : ;
property float4 vegWaveOffsety : static,instance : ;
//8 floats: xxxxyyyy (xy per layer)

VPROG_BEGIN

    float3 inPosition = VP_IN_POSITION.xyz;
    float2 inTexCoord0 = VP_IN_TEXCOORD0;
    float3 inTexCoord1 = VP_IN_TEXCOORD1;
    float3 inTexCoord2 = VP_IN_TEXCOORD2;
    
    VP_OUT(texCoord) = inTexCoord0;
    
    //inTexCoord1.y - cluster type (0...3)
    //inTexCoord1.z - cluster's reference density (0...15)

    float3 clusterCenter = float3(inTexCoord2.x + tilePos.x, inTexCoord2.y + tilePos.y, inTexCoord2.z);
	
	float2 uv = 0.5 - clusterCenter.xy / worldSize.xy;
	float2 uvColor = float2(1.0 - uv.x, uv.y);
	float2 uvHeight = float2(uvColor.x, 1.0 - uv.y) + 0.5 / heightmapTextureSize;
			
    float4 heightVec = VP_TEXTURE2D(heightmap, uvHeight, 0.0);
    float height = dot(heightVec, float4(0.00022888532845, 0.00366216525521, 0.05859464408331, 0.93751430533303)) * worldSize.z;

    float3 pos = float3(inPosition.x + tilePos.x, inPosition.y + tilePos.y, inPosition.z);
    pos.z += height;
    clusterCenter.z += height;

    float clusterScale = tilePos.z;
    if(int(inTexCoord1.x) == int(lodSwitchScale.x))
    {
        clusterScale *= lodSwitchScale.y;
    }

    float4 vegetationMask = VP_TEXTURE2D(vegetationmap, uvColor, 0.0);
    
    VP_OUT(vegetationColor) = half3(vegetationMask.rgb);
    
    //wave transform
    int waveIndex = int(inTexCoord1.y);
    
    pos.x += inTexCoord1.z * vegWaveOffsetx[waveIndex];
    pos.y += inTexCoord1.z * vegWaveOffsety[waveIndex];
    
    pos = lerp(clusterCenter, pos, vegetationMask.a * clusterScale);
    VP_OUT_POSITION = mul( float4(pos, 1.0), worldViewProjMatrix );

#if VERTEX_FOG
    
    float3 eyeCoordsPosition = mul( float4( pos, 1.0 ), worldViewMatrix ).xyz;
    #define FOG_view_position eyeCoordsPosition
    
#if FOG_ATMOSPHERE
    float3 tolight_dir = float4(lightPosition0).xyz - eyeCoordsPosition * float4(lightPosition0).w;
    #define FOG_to_light_dir tolight_dir
#endif
    
#if FOG_HALFSPACE || FOG_ATMOSPHERE_MAP
    float3 world_position = mul( float4( pos, 1.0 ), worldMatrix ).xyz;
    #define FOG_world_position world_position
#endif

    #define FOG_eye_position cameraPosition

    #include "vp-fog-math.cgh" // in{ float3 FOG_view_position, float3 FOG_eye_position, float3 FOG_to_light_dir, float3 FOG_world_position }; out{ float4 FOG_result };
    
    VP_OUT(varFog) = FOG_result;
    
#endif


VPROG_END
