#include "common.cgh"
#include "blending.cgh"


////////////////////////////////////////////////////////////////////////////////
// fprog-input

FPROG_IN_BEGIN
    
    #if MATERIAL_TEXTURE
        
        #if TEXTURE0_ANIMATION_SHIFT
        FPROG_IN_TEXCOORD0(varTexCoord0,2)
        #else
        FPROG_IN_TEXCOORD0(varTexCoord0,2)
        #endif

    #elif MATERIAL_SKYBOX
        
        FPROG_IN_TEXCOORD0(varTexCoord0,3)

    #endif

    #if MATERIAL_DECAL || ( MATERIAL_LIGHTMAP  && VIEW_DIFFUSE ) || FRAME_BLEND || ALPHA_MASK
        FPROG_IN_TEXCOORD1(varTexCoord1,2)
    #endif

    #if MATERIAL_DETAIL
        FPROG_IN_TEXCOORD1(varTexCoord1,2)
    #endif

    #if TILED_DECAL_MASK
         FPROG_IN_TEXCOORD2(varDecalTileTexCoord,2)
    #endif
    #if MATERIAL_DETAIL
        FPROG_IN_TEXCOORD2_HALF(varDetailTexCoord,2)
    #endif

    #if VERTEX_LIT

        FPROG_IN_COLOR0_LOW(varDiffuseColor,1)

        #if BLINN_PHONG
            FPROG_IN_TEXCOORD4_LOW(varSpecularColor,1) // lowp
        #elif NORMALIZED_BLINN_PHONG
            FPROG_IN_TEXCOORD4_LOW(varSpecularColor,4) // lowp
        #endif

    #elif PIXEL_LIT
        
        #if FAST_NORMALIZATION
        FPROG_IN_COLOR0_LOW(varHalfVec,3)
        #endif
        FPROG_IN_COLOR1_LOW(varToLightVec,3)        
        FPROG_IN_TEXCOORD7(varToCameraVec,3) 
        
    #endif
    
    #if VERTEX_COLOR || SPHERICAL_LIT
        FPROG_IN_COLOR1_LOW(varVertexColor,4)
    #endif

    #if VERTEX_FOG
        FPROG_IN_TEXCOORD5_LOW(varFog,4)
    #endif           

    #if FRAME_BLEND
        FPROG_IN_TEXCOORD3_LOW(varTime, 1)
    #endif
    
    #if FLOWMAP
        FPROG_IN_TEXCOORD4(varFlowData, 3) //(phase0 phase1 blend)
    #endif


FPROG_IN_END


////////////////////////////////////////////////////////////////////////////////
// fprog-output

FPROG_OUT_BEGIN
    FPROG_OUT_COLOR
FPROG_OUT_END





#if MATERIAL_TEXTURE
    DECL_FP_SAMPLER2D(albedo)
#elif MATERIAL_SKYBOX
    DECL_FP_SAMPLERCUBE(cubemap)
#endif

#if MATERIAL_DECAL
    DECL_FP_SAMPLER2D(decal)
#endif

#if ALPHA_MASK
    DECL_FP_SAMPLER2D(alphamask)
#endif

#if MATERIAL_DETAIL
    DECL_FP_SAMPLER2D(detail)
#endif

#if MATERIAL_LIGHTMAP  && VIEW_DIFFUSE
    DECL_FP_SAMPLER2D(lightmap)
#endif

#if FLOWMAP
    DECL_FP_SAMPLER2D(flowmap)
#endif

#if MATERIAL_TEXTURE && ALPHATEST && ALPHATESTVALUE
    property float alphatestThreshold           : static,a : ;
#endif

#if PIXEL_LIT
    DECL_FP_SAMPLER2D(normalmap)        
    property float  inSpecularity               : static,a : def_value=1.0;    
    property float3 metalFresnelReflectance     : static,a : def_value=0.5,0.5,0.5;
    property float  normalScale                 : static,a : def_value=1.0;
#endif


#if TILED_DECAL_MASK
    DECL_FP_SAMPLER2D(decalmask)
    DECL_FP_SAMPLER2D(decaltexture)
    property float4 decalTileColor : static,a : def_value=1,1,1,1 ;
#endif


#if (VERTEX_LIT || PIXEL_LIT ) && (!SKYOBJECT)
    property float3 lightAmbientColor0 : dynamic,a : ;
    property float3 lightColor0 : dynamic,a : ;
    #if NORMALIZED_BLINN_PHONG && VIEW_SPECULAR
        property float inGlossiness : static,a : def_value=0.5;
    #endif
#endif


#if PIXEL_LIT
    property float4 lightPosition0 : dynamic,a : ;
#endif


#if FLATCOLOR
    property float4 flatColor : static,a : ;
#endif

#if SETUP_LIGHTMAP && (MATERIAL_DECAL || MATERIAL_LIGHTMAP)
    property float lightmapSize : static,a : ;    
#endif

float 
FresnelShlick( float NdotL, float Cspec )
{
    float expf = 5.0;
    return Cspec + (1.0 - Cspec) * pow(1.0 - NdotL, expf);
}

float3
FresnelShlickVec3( float NdotL, float3 Cspec )
{
    float expf = 5.0;
    return Cspec + (1.0 - Cspec) * (pow(1.0 - NdotL, expf));
}



////////////////////////////////////////////////////////////////////////////////
//

FPROG_BEGIN

    #if VERTEX_FOG
        float   varFogAmoung = float(FP_IN(varFog).a);
        float3  varFogColor  = float3(FP_IN(varFog).rgb);
    #endif
    
    // FETCH PHASE
    #if MATERIAL_TEXTURE
    
        #if PIXEL_LIT || ALPHATEST || ALPHABLEND || VERTEX_LIT
            #if FLOWMAP
                float3 flowData = FP_IN(varFlowData);
                float2 flowDir = float2(FP_TEXTURE2D( flowmap, FP_IN(varTexCoord0) ).xy) * 2.0 - 1.0;
                min10float4 flowSample1 = min10float4(FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) + flowDir*flowData.x));
                min10float4 flowSample2 = min10float4(FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) + flowDir*flowData.y));
                min10float4 textureColor0 = lerp(flowSample1, flowSample2, min10float(flowData.z) );
            #else
                min10float4 textureColor0 = min10float4(FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) ));
            #endif
            
            #if ALPHA_MASK 
                textureColor0.a *= min10float(FP_A8(FP_TEXTURE2D( alphamask, FP_IN(varTexCoord1) )));
            #endif          
        #else
            #if FLOWMAP
                float3 flowData = FP_IN(varFlowData);
                float2 flowDir = float2(FP_TEXTURE2D( flowmap, FP_IN(varTexCoord0) ).xy) * 2.0 - 1.0;
                min10float3 flowSample1 = min10float3( FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) + flowDir*flowData.x).rgb);
                min10float3 flowSample2 = min10float3(FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) + flowDir*flowData.y).rgb);
                min10float3 textureColor0 = lerp(flowSample1, flowSample2, min10float(flowData.z) );             
            #else
                #if TEST_OCCLUSION
                    min10float4 preColor = min10float3(FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) ) );
                    min10float3 textureColor0 = min10float3(preColor.rgb*preColor.a);
                #else
                min10float3 textureColor0 = min10float3(FP_TEXTURE2D( albedo, FP_IN(varTexCoord0) ).rgb);
                #endif
                
            #endif
        #endif
            
        #if FRAME_BLEND
            min10float4 blendFrameColor = min10float4( FP_TEXTURE2D( albedo, FP_IN(varTexCoord1) ) );
            min10float varTime = FP_IN(varTime);
            textureColor0 = lerp( textureColor0, blendFrameColor, varTime );
        #endif
    
    #elif MATERIAL_SKYBOX
    
        min10float4 textureColor0 = FP_TEXTURECUBE( cubemap, FP_IN(varTexCoord0) );
    
    #endif


    #if MATERIAL_TEXTURE
        #if ALPHATEST
            float alpha = textureColor0.a;
            #if VERTEX_COLOR
                alpha *= float(FP_IN(varVertexColor).a);
            #endif
            #if ALPHATESTVALUE
                if( alpha < alphatestThreshold ) FP_DISCARD_FRAGMENT;
            #else
                if( alpha < 0.5 ) FP_DISCARD_FRAGMENT;
            #endif
        #endif
    #endif

    
    #if MATERIAL_DECAL
        float3 textureColor1 = FP_TEXTURE2D( decal, FP_IN(varTexCoord1) ).rgb;
    #endif
    
    
    #if MATERIAL_LIGHTMAP  && VIEW_DIFFUSE
        float3 textureColor1 = FP_TEXTURE2D( lightmap, FP_IN(varTexCoord1) ).rgb;
    #endif
    
    
    #if MATERIAL_DETAIL
        min10float3 detailTextureColor = FP_TEXTURE2D( detail, FP_IN(varDetailTexCoord) ).rgb;
    #endif


    #if MATERIAL_DECAL || MATERIAL_LIGHTMAP
        #if SETUP_LIGHTMAP
            min10float3 lightGray = float3(0.75,0.75,0.75);
            min10float3 darkGray = float3(0.25,0.25,0.25);
    
            bool isXodd;
            bool isYodd;            
            
            if(fract(floor(FP_IN(varTexCoord1).x*lightmapSize)/2.0) == 0.0)
            {
                isXodd = true;
            }
            else
            {
                isXodd = false;
            }
            
            if(fract(floor(FP_IN(varTexCoord1).y*lightmapSize)/2.0) == 0.0)
            {
                isYodd = true;
            }
            else
            {
                isYodd = false;
            }
    
            if((isXodd && isYodd) || (!isXodd && !isYodd))
            {
                textureColor1 = lightGray;
            }
            else
            {
                textureColor1 = darkGray;
            }
        #endif
    #endif


    // DRAW PHASE

    #if VERTEX_LIT
    
        #if BLINN_PHONG
            
            min10float3 color = min10float3(0.0,0.0,0.0);
            #if VIEW_AMBIENT
                color += min10float3(lightAmbientColor0);
            #endif

            #if VIEW_DIFFUSE
                color += min10float3(FP_IN(varDiffuseColor), FP_IN(varDiffuseColor), FP_IN(varDiffuseColor));
            #endif

            #if VIEW_ALBEDO
                #if TILED_DECAL_MASK
                    min10float maskSample = FP_A8(FP_TEXTURE2D( decalmask, FP_IN(varTexCoord0) ));
                    min10float4 tileColor = min10float4( FP_TEXTURE2D( decaltexture, FP_IN(varDecalTileTexCoord) ).rgba * decalTileColor );
                    color *= textureColor0.rgb + (tileColor.rgb - textureColor0.rgb) * tileColor.a * maskSample;
                #else
                    color *= textureColor0.rgb;
                #endif
            #endif

            #if VIEW_SPECULAR
                color += min10float3( (FP_IN(varSpecularColor) * textureColor0.a) * lightColor0 );
            #endif
    
        #elif NORMALIZED_BLINN_PHONG
   
            min10float3 color = min10float3(0.0,0.0,0.0);
            
            #if VIEW_AMBIENT && !MATERIAL_LIGHTMAP
                color += min10float3(lightAmbientColor0);
            #endif
        
            #if VIEW_DIFFUSE
                #if MATERIAL_LIGHTMAP
                    #if VIEW_ALBEDO
                        color = min10float3(textureColor1.rgb * 2.0);
                    #else
                        //do not scale lightmap in view diffuse only case. artist request
                        color = min10float3(textureColor1.rgb); 
                    #endif
                #else
                    color += min10float3(FP_IN(varDiffuseColor) * lightColor0);
                #endif
            #endif
        
            #if VIEW_ALBEDO
                #if TILED_DECAL_MASK
                    min10float maskSample = FP_A8(FP_TEXTURE2D( decalmask, FP_IN(varTexCoord0) ));
                    min10float4 tileColor = min10float4( FP_TEXTURE2D( decaltexture, FP_IN(varDecalTileTexCoord) ).rgba * decalTileColor );
                    color *= textureColor0.rgb + (tileColor.rgb - textureColor0.rgb) * tileColor.a * maskSample;
                #else
                    color *= textureColor0.rgb;
                #endif
            #endif
    
            #if VIEW_SPECULAR
                float glossiness = pow(5000.0, inGlossiness * textureColor0.a);
                float specularNorm = (glossiness + 2.0) / 8.0;
                float3 spec = float3(FP_IN(varSpecularColor).xyz) * pow( float(FP_IN(varSpecularColor).w), glossiness) * specularNorm;
                                                     
                #if MATERIAL_LIGHTMAP
                    color += min10float3(spec * textureColor1.rgb / 2.0 * lightColor0);
                #else
                    color += min10float3(spec * lightColor0);
                #endif
            #endif
    
        #endif


    #elif PIXEL_LIT
        
        // lookup normal from normal map, move from [0, 1] to  [-1, 1] range, normalize
        float3 normal = 2.0 * FP_TEXTURE2D( normalmap, FP_IN(varTexCoord0) ).rgb - 1.0;
        normal.xy *= normalScale;
        normal = normalize (normal);        
    
        #if !FAST_NORMALIZATION
            float3 toLightNormalized = float3(normalize(FP_IN(varToLightVec).xyz));
            float3 toCameraNormalized = float3(normalize(FP_IN(varToCameraVec)));
            float3 H = toCameraNormalized + toLightNormalized;
            H = normalize(H);

            // compute diffuse lighting
            float NdotL = max (dot (normal, toLightNormalized), 0.0);
            float NdotH = max (dot (normal, H), 0.0);
            float LdotH = max (dot (toLightNormalized, H), 0.0);
            float NdotV = max (dot (normal, toCameraNormalized), 0.0);
        #else
            // Kwasi normalization :-)
            // compute diffuse lighting
            float3 normalizedHalf = float3(normalize(FP_IN(varHalfVec.xyz)));
            
            float NdotL = max (dot (normal, float3(FP_IN(varToLightVec).xyz) ), 0.0);
            float NdotH = max (dot (normal, normalizedHalf), 0.0);
            float LdotH = max (dot (float3(FP_IN(varToLightVec).xyz), normalizedHalf), 0.0);
            float NdotV = max (dot (normal, FP_IN(varToCameraVec)), 0.0); 
        #endif
    
        #if NORMALIZED_BLINN_PHONG
    
            #if DIELECTRIC
                #define ColorType float
                float fresnelOut = FresnelShlick( NdotV, dielectricFresnelReflectance );
            #else
                #if FAST_METAL
                    #define ColorType float
                    float fresnelOut = FresnelShlick( NdotV, (metalFresnelReflectance.r + metalFresnelReflectance.g + metalFresnelReflectance.b) / 3.0 );
                #else
                    #define ColorType float3
                    float3 fresnelOut = FresnelShlickVec3( NdotV, metalFresnelReflectance );
                #endif
            #endif
            
            
            //#define GOTANDA                        
            #if GOTANDA
                float3 fresnelIn = FresnelShlickVec3(NdotL, metalFresnelReflectance);
                float3 diffuse = NdotL / _PI * (1.0 - fresnelIn * inSpecularity);
            #else
                float diffuse = NdotL / _PI;// * (1.0 - fresnelIn * inSpecularity);
            #endif
        
            #if VIEW_SPECULAR
                //float glossiness = inGlossiness * 0.999;
                //glossiness = 200.0 * glossiness / (1.0 - glossiness);                
                float glossiness = inGlossiness * textureColor0.a;
                float glossPower = pow(5000.0, glossiness); //textureColor0.a;
                       
                #if GOTANDA
                    float specCutoff = 1.0 - NdotL;
                    specCutoff *= specCutoff;
                    specCutoff *= specCutoff;
                    specCutoff *= specCutoff;
                    specCutoff = 1.0 - specCutoff;
                #else
                    float specCutoff = NdotL;
                #endif
        
                #if GOTANDA
                    float specularNorm = (glossPower + 2.0) * (glossPower + 4.0) / (8.0 * _PI * (pow(2.0, -glossPower / 2.0) + glossPower));
                #else
                    float specularNorm = (glossPower + 2.0) / 8.0;
                #endif

                float specularNormalized = specularNorm * pow(NdotH, glossPower) * specCutoff * inSpecularity;

                #if FAST_METAL
                    float geometricFactor = 1.0;
                #else
                    float geometricFactor = 1.0 / LdotH * LdotH;
                #endif

                ColorType specular = specularNormalized * geometricFactor * fresnelOut;
            #endif
        
        #endif
    
        min10float3 color = min10float3(0.0,0.0,0.0);
    
        #if VIEW_AMBIENT && !MATERIAL_LIGHTMAP
            color += min10float3(lightAmbientColor0);
        #endif
    
        #if VIEW_DIFFUSE
            #if MATERIAL_LIGHTMAP
                #if VIEW_ALBEDO
                    color = min10float3(textureColor1.rgb * 2.0);
                #else
                    //do not scale lightmap in view diffuse only case. artist request
                    color = min10float3(textureColor1.rgb); 
                #endif
            #else
                color += min10float3(diffuse * lightColor0);
            #endif
        #endif
    
        #if VIEW_ALBEDO
            #if TILED_DECAL_MASK
                min10float maskSample = FP_A8( FP_TEXTURE2D( decalmask, FP_IN(varTexCoord0) ));
                min10float4 tileColor = min10float4( FP_TEXTURE2D( decaltexture, FP_IN(varDecalTileTexCoord) ).rgba * decalTileColor );
                color *= textureColor0.rgb + (tileColor.rgb - textureColor0.rgb) * tileColor.a * maskSample;
            #else
                color *= textureColor0.rgb;
            #endif
        #endif
    
        #if VIEW_SPECULAR
            #if MATERIAL_LIGHTMAP
                color += min10float3(specular * textureColor1.rgb * lightColor0);
            #else
                color += min10float3(specular * lightColor0);
            #endif
        #endif

    #else
        
        #if MATERIAL_DECAL || MATERIAL_LIGHTMAP
            
            float3 color = float3(0.0,0.0,0.0);

            #if VIEW_ALBEDO
                color = float3(textureColor0.rgb);
            #else
                color = float3(1.0,1.0,1.0);
            #endif

            #if VIEW_DIFFUSE
                #if VIEW_ALBEDO
                    color *= textureColor1.rgb * 2.0;
                #else
                    //do not scale lightmap in view diffuse only case. artist request
                    color *= textureColor1.rgb; 
                #endif              
            #endif

        #elif MATERIAL_TEXTURE

            float3 color = float3(textureColor0.rgb);
        
        #elif MATERIAL_SKYBOX
            
            float4 color = float4(textureColor0);
        
        #else
            
            float3 color = float3(1.0,1.0,1.0);
        
        #endif
        
        #if TILED_DECAL_MASK
            min10float maskSample = FP_A8(FP_TEXTURE2D( decalmask, FP_IN(varTexCoord0) ));
            min10float4 tileColor = min10float4( FP_TEXTURE2D( decaltexture, FP_IN(varDecalTileTexCoord) ).rgba * decalTileColor );
            color.rgb += (tileColor.rgb - color.rgb) * tileColor.a * maskSample;
        #endif
        
    #endif


    #if MATERIAL_DETAIL
        color *= detailTextureColor.rgb * 2.0;
    #endif



    #if ALPHABLEND && MATERIAL_TEXTURE
        FP_OUT_COLOR = float4( color, textureColor0.a );
    #elif MATERIAL_SKYBOX
        FP_OUT_COLOR = color;
    #else
        FP_OUT_COLOR = float4( color.r, color.g, color.b, 1.0 );
    #endif

    
    #if VERTEX_COLOR || SPEED_TREE_LEAF || SPHERICAL_LIT
        FP_OUT_COLOR *= float4(FP_IN(varVertexColor));
    #endif
        
    #if FLATCOLOR
        FP_OUT_COLOR *= flatColor;
    #endif




    
    
    #if VERTEX_FOG
        #if !FRAMEBUFFER_FETCH
            //VI: fog equation is inside of color equation for framebuffer fetch
            FP_OUT_COLOR.rgb = lerp( FP_OUT_COLOR.rgb, varFogColor, varFogAmoung );
        #endif
    #endif


FPROG_END
