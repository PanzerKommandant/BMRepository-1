blending : src=one dst=inv_src_alpha

#define GRADIENT_MULTIPLY 0
#define GRADIENT_BLEND    1
#define GRADIENT_ADD      2
#define GRADIENT_SCREEN   3
#define GRADIENT_OVERLAY  4

#ifndef GRADIENT_MODE
#define GRADIENT_MODE GRADIENT_MULTIPLY
#endif


FPROG_IN_BEGIN
    FPROG_IN_TEXCOORD0(uvMask,2)
    FPROG_IN_TEXCOORD1(uvDetail,2)
    FPROG_IN_TEXCOORD2(uvGradient,2)
    FPROG_IN_TEXCOORD3(uvContour,2)
    FPROG_IN_COLOR0_LOW(color,4)
FPROG_IN_END
        
FPROG_OUT_BEGIN
    FPROG_OUT_COLOR
FPROG_OUT_END

DECL_FP_SAMPLER2D(mask)
DECL_FP_SAMPLER2D(detail)
DECL_FP_SAMPLER2D(gradient)
DECL_FP_SAMPLER2D(contour)


FPROG_BEGIN

    min10float4 in_color = FP_IN(color);
    
    //fetch
    float maskColor = FP_TEXTURE2D(mask, FP_IN(uvMask)).a;
    float4 detailColor = FP_TEXTURE2D(detail, FP_IN(uvDetail)); 
    float4 gradientColor = FP_TEXTURE2D(gradient, FP_IN(uvGradient));
    float4 contourColor = FP_TEXTURE2D(contour, FP_IN(uvContour));
    
    #if GRADIENT_MODE == GRADIENT_MULTIPLY
        float4 detailImpact = float4(detailColor.rgb * gradientColor.rgb, maskColor);
    #elif GRADIENT_MODE == GRADIENT_BLEND
        float4 detailImpact = float4(lerp(detailColor.rgb, gradientColor.rgb, gradientColor.a), maskColor);
    #elif GRADIENT_MODE == GRADIENT_ADD
        float4 detailImpact = float4(detailColor.rgb + gradientColor.rgb, maskColor);
    #elif GRADIENT_MODE == GRADIENT_SCREEN
        float4 detailImpact = float4(float3(1.0, 1.0, 1.0) - (float3(1.0, 1.0, 1.0)-detailColor.rgb) * (float3(1.0, 1.0, 1.0) - gradientColor.rgb), maskColor);
    #elif GRADIENT_MODE == GRADIENT_OVERLAY
        float3 overlayLow = 2.0 * detailColor.rgb * gradientColor.rgb;
        float3 overlayHi = float3(1.0, 1.0, 1.0) - 2.0* (float3(1.0, 1.0, 1.0)-detailColor.rgb) * (float3(1.0, 1.0, 1.0) - gradientColor.rgb);
        float3 detailImpactColor = lerp(overlayLow, overlayHi, step(0.5, detailColor.rgb));
        float4 detailImpact = float4(detailImpactColor, maskColor);
    #endif

    float3 detailPremult = detailImpact.rgb*detailImpact.a;
    float4 resColor = float4((contourColor.rgb-detailPremult)*contourColor.a+detailPremult, detailImpact.a + contourColor.a);

    in_color.rgb*=in_color.a; //as we are using premultipled alpha blending
    resColor = resColor * float4(in_color);

    FP_OUT_COLOR = resColor; 

FPROG_END
